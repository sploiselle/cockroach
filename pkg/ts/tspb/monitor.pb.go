// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ts/tspb/monitor.proto

/*
	Package tspb is a generated protocol buffer package.

	It is generated from these files:
		ts/tspb/monitor.proto
		ts/tspb/timeseries.proto

	It has these top-level messages:
		RollupDatapoint
		MetricRollups
		TimeSeriesDatapoint
		TimeSeriesData
		Query
		TimeSeriesQueryRequest
		TimeSeriesQueryResponse
		DumpRequest
*/
package tspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import sortkeys "github.com/gogo/protobuf/sortkeys"
import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RollupRes int32

const (
	RollupRes_oneM RollupRes = 0
	RollupRes_tenM RollupRes = 1
	RollupRes_oneH RollupRes = 2
	RollupRes_oneD RollupRes = 3
)

var RollupRes_name = map[int32]string{
	0: "oneM",
	1: "tenM",
	2: "oneH",
	3: "oneD",
}
var RollupRes_value = map[string]int32{
	"oneM": 0,
	"tenM": 1,
	"oneH": 2,
	"oneD": 3,
}

func (x RollupRes) String() string {
	return proto.EnumName(RollupRes_name, int32(x))
}
func (RollupRes) EnumDescriptor() ([]byte, []int) { return fileDescriptorMonitor, []int{0} }

type RollupDatapoint struct {
	TimestampNanos int64   `protobuf:"varint,1,opt,name=timestampNanos,proto3" json:"timestampNanos,omitempty"`
	First          float64 `protobuf:"fixed64,2,opt,name=first,proto3" json:"first,omitempty"`
	Last           float64 `protobuf:"fixed64,3,opt,name=last,proto3" json:"last,omitempty"`
	Min            float64 `protobuf:"fixed64,4,opt,name=min,proto3" json:"min,omitempty"`
	Max            float64 `protobuf:"fixed64,5,opt,name=max,proto3" json:"max,omitempty"`
	Sum            float64 `protobuf:"fixed64,6,opt,name=sum,proto3" json:"sum,omitempty"`
	Count          uint32  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Variance       float64 `protobuf:"fixed64,8,opt,name=variance,proto3" json:"variance,omitempty"`
	NodeID         int32   `protobuf:"varint,9,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *RollupDatapoint) Reset()                    { *m = RollupDatapoint{} }
func (m *RollupDatapoint) String() string            { return proto.CompactTextString(m) }
func (*RollupDatapoint) ProtoMessage()               {}
func (*RollupDatapoint) Descriptor() ([]byte, []int) { return fileDescriptorMonitor, []int{0} }

type MetricRollups struct {
	MostRecent map[int32]*RollupDatapoint `protobuf:"bytes,1,rep,name=mostRecent" json:"mostRecent,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetricRollups) Reset()                    { *m = MetricRollups{} }
func (m *MetricRollups) String() string            { return proto.CompactTextString(m) }
func (*MetricRollups) ProtoMessage()               {}
func (*MetricRollups) Descriptor() ([]byte, []int) { return fileDescriptorMonitor, []int{1} }

func init() {
	proto.RegisterType((*RollupDatapoint)(nil), "tspb.RollupDatapoint")
	proto.RegisterType((*MetricRollups)(nil), "tspb.MetricRollups")
	proto.RegisterEnum("tspb.RollupRes", RollupRes_name, RollupRes_value)
}
func (m *RollupDatapoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupDatapoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimestampNanos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.TimestampNanos))
	}
	if m.First != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.First))))
		i += 8
	}
	if m.Last != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Last))))
		i += 8
	}
	if m.Min != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i += 8
	}
	if m.Max != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i += 8
	}
	if m.Sum != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i += 8
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.Count))
	}
	if m.Variance != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Variance))))
		i += 8
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.NodeID))
	}
	return i, nil
}

func (m *MetricRollups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricRollups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MostRecent) > 0 {
		keysForMostRecent := make([]int32, 0, len(m.MostRecent))
		for k := range m.MostRecent {
			keysForMostRecent = append(keysForMostRecent, int32(k))
		}
		sortkeys.Int32s(keysForMostRecent)
		for _, k := range keysForMostRecent {
			dAtA[i] = 0xa
			i++
			v := m.MostRecent[int32(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMonitor(uint64(msgSize))
			}
			mapSize := 1 + sovMonitor(uint64(k)) + msgSize
			i = encodeVarintMonitor(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMonitor(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMonitor(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func encodeVarintMonitor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RollupDatapoint) Size() (n int) {
	var l int
	_ = l
	if m.TimestampNanos != 0 {
		n += 1 + sovMonitor(uint64(m.TimestampNanos))
	}
	if m.First != 0 {
		n += 9
	}
	if m.Last != 0 {
		n += 9
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if m.Count != 0 {
		n += 1 + sovMonitor(uint64(m.Count))
	}
	if m.Variance != 0 {
		n += 9
	}
	if m.NodeID != 0 {
		n += 1 + sovMonitor(uint64(m.NodeID))
	}
	return n
}

func (m *MetricRollups) Size() (n int) {
	var l int
	_ = l
	if len(m.MostRecent) > 0 {
		for k, v := range m.MostRecent {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMonitor(uint64(l))
			}
			mapEntrySize := 1 + sovMonitor(uint64(k)) + l
			n += mapEntrySize + 1 + sovMonitor(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMonitor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMonitor(x uint64) (n int) {
	return sovMonitor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollupDatapoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupDatapoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupDatapoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNanos", wireType)
			}
			m.TimestampNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.First = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Last = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Variance = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricRollups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricRollups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricRollups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MostRecent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MostRecent == nil {
				m.MostRecent = make(map[int32]*RollupDatapoint)
			}
			var mapkey int32
			var mapvalue *RollupDatapoint
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonitor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonitor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonitor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMonitor
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMonitor
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RollupDatapoint{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMonitor(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMonitor
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MostRecent[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonitor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMonitor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMonitor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMonitor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMonitor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonitor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ts/tspb/monitor.proto", fileDescriptorMonitor) }

var fileDescriptorMonitor = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x6a, 0xdb, 0x30,
	0x1c, 0xc6, 0xa3, 0xd8, 0xce, 0x12, 0x85, 0x2c, 0x46, 0x2c, 0x43, 0xe4, 0x60, 0x4c, 0x06, 0xc3,
	0x6c, 0xe0, 0x40, 0x72, 0x19, 0x3b, 0x6e, 0x19, 0xac, 0x07, 0xf7, 0x20, 0xfa, 0x02, 0x8a, 0xab,
	0x82, 0xa9, 0x2d, 0x19, 0xeb, 0xef, 0x90, 0xbc, 0x45, 0x9f, 0xa3, 0x4f, 0x92, 0x63, 0x8f, 0x3d,
	0xb6, 0xce, 0x8b, 0x14, 0xc9, 0x26, 0xb4, 0xb9, 0x7d, 0xdf, 0xef, 0xff, 0x49, 0xe2, 0xff, 0x09,
	0xcf, 0x40, 0x2f, 0x41, 0x97, 0xdb, 0x65, 0xa1, 0x64, 0x06, 0xaa, 0x8a, 0xcb, 0x4a, 0x81, 0x22,
	0xae, 0x61, 0x8b, 0x13, 0xc2, 0x53, 0xa6, 0xf2, 0xbc, 0x2e, 0x37, 0x1c, 0x78, 0xa9, 0x32, 0x09,
	0xe4, 0x3b, 0xfe, 0x0c, 0x59, 0x21, 0x34, 0xf0, 0xa2, 0xbc, 0xe6, 0x52, 0x69, 0x8a, 0x42, 0x14,
	0x39, 0xec, 0x82, 0x92, 0x2f, 0xd8, 0xbb, 0xcb, 0x2a, 0x0d, 0xb4, 0x1f, 0xa2, 0x08, 0xb1, 0xd6,
	0x10, 0x82, 0xdd, 0x9c, 0x6b, 0xa0, 0x8e, 0x85, 0x56, 0x13, 0x1f, 0x3b, 0x45, 0x26, 0xa9, 0x6b,
	0x91, 0x91, 0x96, 0xf0, 0x3d, 0xf5, 0x3a, 0xc2, 0xf7, 0x86, 0xe8, 0xba, 0xa0, 0x83, 0x96, 0xe8,
	0xba, 0x30, 0xf7, 0xa7, 0xaa, 0x96, 0x40, 0x3f, 0x85, 0x28, 0x9a, 0xb0, 0xd6, 0x90, 0x39, 0x1e,
	0xee, 0x78, 0x95, 0x71, 0x99, 0x0a, 0x3a, 0xb4, 0xe1, 0xb3, 0x27, 0x5f, 0xf1, 0x40, 0xaa, 0x5b,
	0x71, 0xb5, 0xa1, 0xa3, 0x10, 0x45, 0x1e, 0xeb, 0xdc, 0xe2, 0x11, 0xe1, 0x49, 0x22, 0xa0, 0xca,
	0xd2, 0x76, 0x57, 0x4d, 0xfe, 0x62, 0x5c, 0x28, 0x0d, 0x4c, 0xa4, 0x42, 0x02, 0x45, 0xa1, 0x13,
	0x8d, 0x57, 0xdf, 0x62, 0x53, 0x49, 0xfc, 0x21, 0x18, 0x27, 0xe7, 0xd4, 0x3f, 0x09, 0xd5, 0x81,
	0xbd, 0x3b, 0x36, 0xbf, 0xc1, 0xd3, 0x8b, 0xb1, 0xd9, 0xe2, 0x5e, 0x1c, 0x6c, 0x61, 0x1e, 0x33,
	0x92, 0xfc, 0xc4, 0xde, 0x8e, 0xe7, 0xb5, 0xb0, 0x2d, 0x8d, 0x57, 0xb3, 0xf6, 0x91, 0x8b, 0xce,
	0x59, 0x9b, 0xf9, 0xdd, 0xff, 0x85, 0x7e, 0xac, 0xf1, 0xa8, 0x9d, 0x32, 0xa1, 0xc9, 0x10, 0xbb,
	0x4a, 0x8a, 0xc4, 0xef, 0x19, 0x05, 0x42, 0x26, 0x3e, 0xea, 0xd8, 0x7f, 0xbf, 0xdf, 0xa9, 0x8d,
	0xef, 0xfc, 0xa1, 0xc7, 0xd7, 0xa0, 0x77, 0x6c, 0x02, 0xf4, 0xd4, 0x04, 0xe8, 0xb9, 0x09, 0xd0,
	0x4b, 0x13, 0xa0, 0x87, 0x53, 0xd0, 0xdb, 0x0e, 0xec, 0x77, 0xaf, 0xdf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xef, 0xa8, 0xba, 0x21, 0x07, 0x02, 0x00, 0x00,
}
