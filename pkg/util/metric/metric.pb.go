// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/metric/metric.proto

/*
	Package metric is a generated protocol buffer package.

	It is generated from these files:
		util/metric/metric.proto

	It has these top-level messages:
		LabelPair
		Metadata
*/
package metric

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import io_prometheus_client "github.com/prometheus/client_model/go"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Units describe the unit of data collected.
type DisplayUnit int32

const (
	// Unset expresses that the metric's DisplayUnit wasn't explicitly set.
	DisplayUnit_Unset DisplayUnit = 0
	// Count expresses that the metric represents a count.
	DisplayUnit_Count DisplayUnit = 1
	// Bytes expresses that the metric measures bytes.
	DisplayUnit_Bytes DisplayUnit = 2
	// Nanoseconds expresses that the metric measures nanoseconds.
	DisplayUnit_Nanoseconds DisplayUnit = 3
	// Timestamp expresses that the metric represents time since the Unix epoch.
	DisplayUnit_Timestamp DisplayUnit = 4
	// Percent expresses that the metric represents a percentage value.
	DisplayUnit_Percent DisplayUnit = 5
	// Const expresses that the metric represents a constant value.
	DisplayUnit_Const DisplayUnit = 6
)

var DisplayUnit_name = map[int32]string{
	0: "Unset",
	1: "Count",
	2: "Bytes",
	3: "Nanoseconds",
	4: "Timestamp",
	5: "Percent",
	6: "Const",
}
var DisplayUnit_value = map[string]int32{
	"Unset":       0,
	"Count":       1,
	"Bytes":       2,
	"Nanoseconds": 3,
	"Timestamp":   4,
	"Percent":     5,
	"Const":       6,
}

func (x DisplayUnit) Enum() *DisplayUnit {
	p := new(DisplayUnit)
	*p = x
	return p
}
func (x DisplayUnit) String() string {
	return proto.EnumName(DisplayUnit_name, int32(x))
}
func (x *DisplayUnit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DisplayUnit_value, data, "DisplayUnit")
	if err != nil {
		return err
	}
	*x = DisplayUnit(value)
	return nil
}
func (DisplayUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

type LabelPair struct {
	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *LabelPair) Reset()                    { *m = LabelPair{} }
func (m *LabelPair) String() string            { return proto.CompactTextString(m) }
func (*LabelPair) ProtoMessage()               {}
func (*LabelPair) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

// Metadata holds metadata about a metric. It must be embedded in
// each metric object. It's used to export information about the
// metric to Prometheus and for Admin UI charts.
type Metadata struct {
	Name        string                            `protobuf:"bytes,1,req,name=name" json:"name"`
	Help        string                            `protobuf:"bytes,2,req,name=help" json:"help"`
	Unit        string                            `protobuf:"bytes,3,req,name=unit" json:"unit"`
	DisplayUnit DisplayUnit                       `protobuf:"varint,4,req,name=displayUnit,enum=cockroach.util.metric.DisplayUnit" json:"displayUnit"`
	MetricType  io_prometheus_client.MetricType   `protobuf:"varint,5,opt,name=metricType,enum=io.prometheus.client.MetricType" json:"metricType"`
	Labels      []*io_prometheus_client.LabelPair `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{1} }

func init() {
	proto.RegisterType((*LabelPair)(nil), "cockroach.util.metric.LabelPair")
	proto.RegisterType((*Metadata)(nil), "cockroach.util.metric.Metadata")
	proto.RegisterEnum("cockroach.util.metric.DisplayUnit", DisplayUnit_name, DisplayUnit_value)
}
func (m *LabelPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	return i, nil
}

func encodeVarintMetric(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LabelPair) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func sovMetric(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetric(x uint64) (n int) {
	return sovMetric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetric
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetric(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetric = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetric   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("util/metric/metric.proto", fileDescriptorMetric) }

var fileDescriptorMetric = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x33, 0x69, 0x5a, 0xcd, 0x44, 0xd7, 0x30, 0xac, 0x30, 0xec, 0x21, 0x09, 0x05, 0x21,
	0x78, 0x98, 0x42, 0x41, 0x04, 0x8f, 0x55, 0x3c, 0x88, 0x2b, 0xcb, 0xb2, 0x7b, 0xf1, 0x22, 0x63,
	0xfa, 0xb9, 0x1d, 0x4c, 0x66, 0x42, 0x66, 0x22, 0xf4, 0x0d, 0x3c, 0xee, 0x23, 0xd8, 0x67, 0xf0,
	0x25, 0x7a, 0xf4, 0xe8, 0x49, 0x34, 0xbe, 0x88, 0x4c, 0x26, 0x76, 0x73, 0xe8, 0x29, 0x5f, 0xbe,
	0xff, 0xef, 0xff, 0x67, 0xbe, 0x3f, 0xa6, 0xad, 0x11, 0xe5, 0xa2, 0x02, 0xd3, 0x88, 0x62, 0xf8,
	0xb0, 0xba, 0x51, 0x46, 0x91, 0xc7, 0x85, 0x2a, 0x3e, 0x37, 0x8a, 0x17, 0x1b, 0x66, 0x19, 0xe6,
	0xc4, 0xb3, 0xd3, 0x1b, 0x75, 0xa3, 0x7a, 0x62, 0x61, 0x27, 0x07, 0x9f, 0x3d, 0xa9, 0x1b, 0x55,
	0x81, 0xd9, 0x40, 0xab, 0x17, 0x45, 0x29, 0x40, 0x9a, 0x0f, 0x95, 0x5a, 0xc3, 0xff, 0x64, 0xed,
	0xb0, 0xf9, 0x33, 0x1c, 0xbe, 0xe5, 0x1f, 0xa1, 0xbc, 0xe0, 0xa2, 0x21, 0x04, 0x07, 0x92, 0x57,
	0x40, 0x51, 0x86, 0xf2, 0xf0, 0xb2, 0x9f, 0xc9, 0x29, 0x9e, 0x7e, 0xe1, 0x65, 0x0b, 0xd4, 0xef,
	0x97, 0xee, 0x67, 0xfe, 0xdd, 0xc7, 0xf7, 0xcf, 0xc1, 0xf0, 0x35, 0x37, 0x9c, 0xd0, 0x83, 0xcd,
	0xcf, 0xc3, 0x55, 0xb0, 0xff, 0x95, 0x7a, 0x83, 0x99, 0xe2, 0x60, 0x03, 0x65, 0x4d, 0xfd, 0xb1,
	0x62, 0x37, 0x56, 0x69, 0xa5, 0x30, 0x74, 0x32, 0x56, 0xec, 0x86, 0xbc, 0xc1, 0xd1, 0x5a, 0xe8,
	0xba, 0xe4, 0xdb, 0x6b, 0x0b, 0x04, 0x99, 0x9f, 0x9f, 0x2c, 0xe7, 0xec, 0xe8, 0xed, 0xec, 0xd5,
	0x1d, 0x39, 0x84, 0x8c, 0xcd, 0xe4, 0x35, 0xc6, 0x0e, 0xbc, 0xda, 0xd6, 0x40, 0xa7, 0x19, 0xca,
	0x4f, 0x96, 0x19, 0x13, 0x7d, 0x47, 0x43, 0x39, 0xcc, 0x95, 0xc3, 0xce, 0x0f, 0xdc, 0x10, 0x34,
	0x72, 0x92, 0xe7, 0x78, 0x56, 0xda, 0x96, 0x34, 0x9d, 0x65, 0x93, 0x3c, 0x5a, 0xa6, 0xc7, 0x33,
	0x0e, 0x4d, 0x5e, 0x0e, 0xf8, 0x8b, 0x07, 0x5f, 0x77, 0xa9, 0x77, 0xbb, 0x4b, 0xbd, 0x6f, 0xbb,
	0xd4, 0x7b, 0xfa, 0x09, 0x47, 0xa3, 0x07, 0x93, 0x10, 0x4f, 0xaf, 0xa5, 0x06, 0x13, 0x7b, 0x76,
	0x7c, 0xa9, 0x5a, 0x69, 0x62, 0x64, 0xc7, 0xd5, 0xd6, 0x80, 0x8e, 0x7d, 0xf2, 0x08, 0x47, 0xef,
	0xb8, 0x54, 0x1a, 0x0a, 0x25, 0xd7, 0x3a, 0x9e, 0x90, 0x87, 0x38, 0xbc, 0x12, 0x15, 0x68, 0xc3,
	0xab, 0x3a, 0x0e, 0x48, 0x84, 0xef, 0x5d, 0x40, 0x53, 0x80, 0x34, 0xf1, 0xd4, 0x45, 0x48, 0x6d,
	0xe2, 0xd9, 0x2a, 0xdb, 0xff, 0x49, 0xbc, 0x7d, 0x97, 0xa0, 0x1f, 0x5d, 0x82, 0x7e, 0x76, 0x09,
	0xfa, 0xdd, 0x25, 0xe8, 0xf6, 0x6f, 0xe2, 0xbd, 0x9f, 0xb9, 0xa3, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x33, 0xb7, 0x4d, 0xcf, 0x65, 0x02, 0x00, 0x00,
}
